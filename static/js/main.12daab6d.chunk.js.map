{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeHolder","handleChange","type","placeholder","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","eachMonster","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAIaA,G,MAAO,SAAAC,GAChB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAA4BL,EAAMI,QAAQE,MAAjCN,EAAMI,QAAQC,IACvB,4BAAIL,EAAMI,QAAQG,aCCjBC,G,MAAW,SAAAR,GACpB,OACI,qBAAKC,UAAU,YAAf,SAEQD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAElB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCZ9BM,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aAEpC,OACI,uBAAOZ,UAAU,SAASa,KAAK,SAASC,YAAaH,EAAaI,SAAUH,MCwCrEI,G,wDAxCb,aAAc,IAAD,8BACX,gBAiBFJ,aAAe,SAACK,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAjBrC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAc,IAJL,E,gEAaO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,SAAUmB,S,+BAMnC,MAM0BC,KAAKN,MAA9Bd,EAND,EAMCA,SAAUW,EANX,EAMWA,YACXU,EAAoBrB,EAASsB,QAAO,SAAAC,GAAW,OAAIA,EAAY1B,KAAK2B,cAAcC,SAASd,EAAYa,kBAC7G,OACE,sBAAKhC,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAcgB,KAAKhB,eAC5D,cAAC,EAAD,CAAUJ,SAAUqB,W,GApCVK,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.12daab6d.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.style.css'\n\nexport const Card = props => {\n    return (\n        <div className=\"card-container\">\n            <img alt=\"mosnter\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n            <h1 key={props.monster.id}>{props.monster.name}</h1>\n            <p>{props.monster.email}</p>\n        </div>\n    )\n}","import React from 'react';\nimport { Card } from '../card/card';\nimport './card-list.style.css'\n\n/**\n * This componnet is just meant to hold individual cards\n * \n * @param {*} props : The properties of this component\n */\n\nexport const CardList = props => {\n    return (\n        <div className=\"card-list\">\n            {\n                props.monsters.map(monster => \n                    (\n                        <Card key={monster.id} monster={monster}/>\n                    )\n                )\n            }\n        </div>\n    );\n}\n","import React from 'react';\nimport './search-box.style.css';\n\n\nexport const SearchBox = ({placeHolder, handleChange}) => {\n\n    return (\n        <input className='search' type='search' placeholder={placeHolder} onChange={handleChange}/>\n    );\n\n} ","import { Component } from 'react';\nimport { CardList } from './components/card-list/card-list';\nimport { SearchBox } from './components/search-box/search-box';\nimport './App.css';\n\nclass App extends Component{\n  //Need to use the constructor to set the State\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField : ''\n    }\n    // this.handleChange = this.handleChange.bind(this); // We wre here binding the this keyword with the this keyword in the handlechange function\n    //this has been set for us here since we called super() and react did some work for us\n    //then the question really becomes functions v/s Arrow functions\n    //If we have the arrow function , JS binds the \"this\" context to the place where they were defined in the first place\n    // Hence the arrow functions are prefered\n    // This is called lexical scoping, since this is bound to where the function is defined, in our case the App class\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users }));\n  }\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value}); // This line here without setting context in the constructor will show this as undefined\n  }\n\n  render(){\n    /**\n     * This is equivalant to \n     * const mosnters = this.state.monsters\n     * const searchField = this.state.searchField\n     * */ \n    const {monsters, searchField} = this.state;\n    const filteredMonsters  = monsters.filter(eachMonster => eachMonster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox placeHolder='Filter monsters' handleChange={this.handleChange}/>\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}